syntax = "proto3";

package redpanda.api.dataplane.v1alpha1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Secret defienes the secret resource.
message Secret {
  // Secret identifier.
  string id = 1 [
    (google.api.field_behavior) = IMMUTABLE,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // Secret labels.
  map<string, string> labels = 2 [
    (buf.validate.field).map = {
      values: {
        string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
      },
    },
    (google.api.field_behavior) = IMMUTABLE
  ];
}

// SecretInput defienes the secret input for secret API actions.
message SecretInput {
  // Secret identifier.
  string id = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).string.pattern = "^[a-z0-9-_]+$"
  ];

  // Secret labels.
  map<string, string> labels = 2 [
    (buf.validate.field).map = {
      values: {
        string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
      },
    },
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The secret data.
  bytes secret_data = 3 [
    (google.api.field_behavior) = INPUT_ONLY,
    (google.api.field_behavior) = REQUIRED
  ];
}

// ListSecretsResponse is the response of ListSecrets.
message ListSecretsResponse {
  // Secrets retrieved.
  repeated Secret secrets = 1;

  // Token to retrieve the next page.
  string next_page_token = 2;
}

// ListSecretsRequest is the request of ListSecrets.
message ListSecretsRequest {
  // Defines the filter for querying the secrets.
  message Filter {
    // The secret ID or name to search for.
    string name = 1;

    // The secret labels to search for.
    map<string, string> labels = 2 [(buf.validate.field).map = {
      values: {
        string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
      },
    }];
  }

  // List filter.
  Filter filter = 1;

  // Value of the next_page_token field returned by the previous response.
  // If not provided, the system assumes the first page is requested.
  string page_token = 2;

  // Limit the paginated response to a number of items.
  int32 page_size = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Limit the paginated response to a number of items.",
    minimum: 1,
    maximum: 50
  }];
}

// GetSecretRequest is the request of GetSecret.
message GetSecretRequest {
  // The id of the secret to retrieve.
  string id = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).string.pattern = "^[a-z0-9/_+=.@-]+$"
  ];
}

// GetSecretResponse is the response of GetSecret.
message GetSecretResponse {
  // The created secret.
  Secret secret = 1;
}

// CreateSecretRequest is the request of CreateSecret.
message CreateSecretRequest {
  // The input for the secret to create.
  SecretInput secret = 1 [(google.api.field_behavior) = REQUIRED];
}

// CreateSecretResponse is the response of CreateSecret.
message CreateSecretResponse {
  // The created secret.
  Secret secret = 1;
}

// UpdateSecretRequest is the request of UpdateSecret.
message UpdateSecretRequest {
  // The input for the secret to update.
  SecretInput secret = 1 [(google.api.field_behavior) = REQUIRED];
}

// UpdateSecretResponse is the response of UpdateSecret.
message UpdateSecretResponse {
  // The updated secret.
  Secret secret = 1;
}

// DeleteSecretRequest is the request of DeleteSecret.
message DeleteSecretRequest {
  // The id of the secret to delete.
  string id = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 255,
    (buf.validate.field).string.pattern = "^[a-z0-9/_+=.@-]+$"
  ];
}

// DeleteSecretResponse is the response of DeleteSecret
message DeleteSecretResponse {}

service SecretService {
  // GetSecret retrieves the specific secret.
  rpc GetSecret(GetSecretRequest) returns (GetSecretResponse) {
    option (google.api.http) = {get: "/v1alpha1/secrets/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Secret"
      description: "Get a secret."
      responses: {
        key: "200"
        value: {
          description: "Ok"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.Secret"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }

  // ListSecrets lists the secrets based on optional filter.
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {
    option (google.api.http) = {get: "/v1alpha1/secrets"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Secrets"
      description: "List Secrets"
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ListSecretsResponse"}
          }
        }
      }
    };
  }

  // CreateSecret creates the secret.
  rpc CreateSecret(CreateSecretRequest) returns (CreateSecretResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/secrets"
      body: "secret"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Secret"
      description: "Create a Secret."
      responses: {
        key: "201"
        value: {
          description: "Secret Created."
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.Secret"}
          }
        }
      }
    };
  }

  // UpdateSecret updates the secret.
  rpc UpdateSecret(UpdateSecretRequest) returns (UpdateSecretResponse) {
    option (google.api.http) = {
      put: "/v1alpha1/secret/{secret.id}"
      body: "secret"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Secret"
      description: "Update a Secret content."
      responses: {
        key: "200"
        value: {
          description: "Ok"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.Secret"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }

  // DeleteSecret deletes the secret.
  rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse) {
    option (google.api.http) = {delete: "/v1alpha1/secrets/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete Secret"
      description: "Delete a Secret."
      responses: {
        key: "204"
        value: {
          description: "Secret was deleted successfully."
          schema: {}
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }
}
